{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "frequency.java",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNjkFQ6wF5NuRFE0VyGiAS8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/simranbiswas/codes/blob/main/frequency.java\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Lgsd_ORuPp7W"
      },
      "source": [
        "import java.io.*;\r\n",
        "import java.math.*;\r\n",
        "import java.security.*;\r\n",
        "import java.text.*;\r\n",
        "import java.util.*;\r\n",
        "import java.util.concurrent.*;\r\n",
        "import java.util.function.*;\r\n",
        "import java.util.regex.*;\r\n",
        "import java.util.stream.*;\r\n",
        "import static java.util.stream.Collectors.joining;\r\n",
        "import static java.util.stream.Collectors.toList;\r\n",
        "\r\n",
        "public class frequency {\r\n",
        "\r\n",
        "    // Complete the freqQuery function below.\r\n",
        "    static List<Integer> freqQuery(List<List<Integer>> queries) {\r\n",
        "        HashMap<Integer, Integer> map = new HashMap<>();\r\n",
        "        \r\n",
        "        List<Integer> res = new ArrayList<>();\r\n",
        "        \r\n",
        "        for(int i=0; i<queries.size(); i++){\r\n",
        "            if((int)((List)queries.get(i)).get(0)==1){\r\n",
        "                \r\n",
        "                if(map.containsKey( (int)((List)queries.get(i)).get(1) )){\r\n",
        "                    int c = (int)map.get( ((List)queries.get(i)).get(1) );\r\n",
        "                    \r\n",
        "                    map.put((int)((List)queries.get(i)).get(1) , ++c);\r\n",
        "                }\r\n",
        "                else{\r\n",
        "                    map.put( (int)((List)queries.get(i)).get(1) , 1);\r\n",
        "                }\r\n",
        "            }\r\n",
        "            else if((int)((List)queries.get(i)).get(0)==2){\r\n",
        "                \r\n",
        "                if(map.containsKey( (int)((List)queries.get(i)).get(1) )){\r\n",
        "                    int c = (int)map.get( ((List)queries.get(i)).get(1) );\r\n",
        "                    \r\n",
        "                    if(c>1)\r\n",
        "                        map.put( (int)((List)queries.get(i)).get(1) , --c);\r\n",
        "                    else\r\n",
        "                        map.remove((int)((List)queries.get(i)).get(1));\r\n",
        "\r\n",
        "                }\r\n",
        "            }\r\n",
        "            \r\n",
        "            else if((int)((List)queries.get(i)).get(0)==3){\r\n",
        "                \r\n",
        "                if(map.containsValue( (int)((List)queries.get(i)).get(1) )){\r\n",
        "                    \r\n",
        "                    res.add(1);\r\n",
        "                }\r\n",
        "                else{\r\n",
        "                    res.add(0);\r\n",
        "                }\r\n",
        "            }\r\n",
        "        }\r\n",
        "        \r\n",
        "        return res;\r\n",
        "    }\r\n",
        "\r\n",
        "    public static void main(String[] args) throws IOException {\r\n",
        "        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\r\n",
        "        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\r\n",
        "\r\n",
        "        int q = Integer.parseInt(bufferedReader.readLine().trim());\r\n",
        "\r\n",
        "        List<List<Integer>> queries = new ArrayList<>();\r\n",
        "\r\n",
        "        IntStream.range(0, q).forEach(i -> {\r\n",
        "            try {\r\n",
        "                queries.add(\r\n",
        "                    Stream.of(bufferedReader.readLine().replaceAll(\"\\\\s+$\", \"\").split(\" \"))\r\n",
        "                        .map(Integer::parseInt)\r\n",
        "                        .collect(toList())\r\n",
        "                );\r\n",
        "            } catch (IOException ex) {\r\n",
        "                throw new RuntimeException(ex);\r\n",
        "            }\r\n",
        "        });\r\n",
        "\r\n",
        "        List<Integer> ans = freqQuery(queries);\r\n",
        "\r\n",
        "        bufferedWriter.write(\r\n",
        "            ans.stream()\r\n",
        "                .map(Object::toString)\r\n",
        "                .collect(joining(\"\\n\"))\r\n",
        "            + \"\\n\"\r\n",
        "        );\r\n",
        "\r\n",
        "        bufferedReader.close();\r\n",
        "        bufferedWriter.close();\r\n",
        "    }\r\n",
        "}\r\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}